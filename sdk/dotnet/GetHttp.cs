// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Http
{
    public static class GetHttp
    {
        public static Task<GetHttpResult> InvokeAsync(GetHttpArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHttpResult>("http:index/getHttp:getHttp", args ?? new GetHttpArgs(), options.WithDefaults());

        public static Output<GetHttpResult> Invoke(GetHttpInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHttpResult>("http:index/getHttp:getHttp", args ?? new GetHttpInvokeArgs(), options.WithDefaults());

        public static Output<GetHttpResult> Invoke(GetHttpInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHttpResult>("http:index/getHttp:getHttp", args ?? new GetHttpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHttpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("caCertPem")]
        public string? CaCertPem { get; set; }

        /// <summary>
        /// Client certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("clientCertPem")]
        public string? ClientCertPem { get; set; }

        /// <summary>
        /// Client key in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("clientKeyPem")]
        public string? ClientKeyPem { get; set; }

        /// <summary>
        /// Disables verification of the server's certificate chain and hostname. Defaults to `false`
        /// </summary>
        [Input("insecure")]
        public bool? Insecure { get; set; }

        /// <summary>
        /// The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
        /// </summary>
        [Input("method")]
        public string? Method { get; set; }

        /// <summary>
        /// The request body as a string.
        /// </summary>
        [Input("requestBody")]
        public string? RequestBody { get; set; }

        [Input("requestHeaders")]
        private Dictionary<string, string>? _requestHeaders;

        /// <summary>
        /// A map of request header field names and values.
        /// </summary>
        public Dictionary<string, string> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new Dictionary<string, string>());
            set => _requestHeaders = value;
        }

        /// <summary>
        /// The request timeout in milliseconds.
        /// </summary>
        [Input("requestTimeoutMs")]
        public int? RequestTimeoutMs { get; set; }

        [Input("retry")]
        public Inputs.GetHttpRetryArgs? Retry { get; set; }

        /// <summary>
        /// The URL for the request. Supported schemes are `http.getHttp` and `https`.
        /// </summary>
        [Input("url", required: true)]
        public string Url { get; set; } = null!;

        public GetHttpArgs()
        {
        }
        public static new GetHttpArgs Empty => new GetHttpArgs();
    }

    public sealed class GetHttpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("caCertPem")]
        public Input<string>? CaCertPem { get; set; }

        /// <summary>
        /// Client certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("clientCertPem")]
        public Input<string>? ClientCertPem { get; set; }

        /// <summary>
        /// Client key in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("clientKeyPem")]
        public Input<string>? ClientKeyPem { get; set; }

        /// <summary>
        /// Disables verification of the server's certificate chain and hostname. Defaults to `false`
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The request body as a string.
        /// </summary>
        [Input("requestBody")]
        public Input<string>? RequestBody { get; set; }

        [Input("requestHeaders")]
        private InputMap<string>? _requestHeaders;

        /// <summary>
        /// A map of request header field names and values.
        /// </summary>
        public InputMap<string> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<string>());
            set => _requestHeaders = value;
        }

        /// <summary>
        /// The request timeout in milliseconds.
        /// </summary>
        [Input("requestTimeoutMs")]
        public Input<int>? RequestTimeoutMs { get; set; }

        [Input("retry")]
        public Input<Inputs.GetHttpRetryInputArgs>? Retry { get; set; }

        /// <summary>
        /// The URL for the request. Supported schemes are `http.getHttp` and `https`.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public GetHttpInvokeArgs()
        {
        }
        public static new GetHttpInvokeArgs Empty => new GetHttpInvokeArgs();
    }


    [OutputType]
    public sealed class GetHttpResult
    {
        /// <summary>
        /// The response body returned as a string. **NOTE**: This is deprecated, use `response_body` instead.
        /// </summary>
        public readonly string Body;
        /// <summary>
        /// Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        public readonly string? CaCertPem;
        /// <summary>
        /// Client certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        public readonly string? ClientCertPem;
        /// <summary>
        /// Client key in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        public readonly string? ClientKeyPem;
        /// <summary>
        /// The URL used for the request.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Disables verification of the server's certificate chain and hostname. Defaults to `false`
        /// </summary>
        public readonly bool? Insecure;
        /// <summary>
        /// The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
        /// </summary>
        public readonly string? Method;
        /// <summary>
        /// The request body as a string.
        /// </summary>
        public readonly string? RequestBody;
        /// <summary>
        /// A map of request header field names and values.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? RequestHeaders;
        /// <summary>
        /// The request timeout in milliseconds.
        /// </summary>
        public readonly int? RequestTimeoutMs;
        /// <summary>
        /// The response body returned as a string.
        /// </summary>
        public readonly string ResponseBody;
        /// <summary>
        /// The response body encoded as base64 (standard) as defined in [RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648#section-4).
        /// </summary>
        public readonly string ResponseBodyBase64;
        /// <summary>
        /// A map of response header field names and values. Duplicate headers are concatenated according to [RFC2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2).
        /// </summary>
        public readonly ImmutableDictionary<string, string> ResponseHeaders;
        public readonly Outputs.GetHttpRetryResult? Retry;
        /// <summary>
        /// The HTTP response status code.
        /// </summary>
        public readonly int StatusCode;
        /// <summary>
        /// The URL for the request. Supported schemes are `http.getHttp` and `https`.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetHttpResult(
            string body,

            string? caCertPem,

            string? clientCertPem,

            string? clientKeyPem,

            string id,

            bool? insecure,

            string? method,

            string? requestBody,

            ImmutableDictionary<string, string>? requestHeaders,

            int? requestTimeoutMs,

            string responseBody,

            string responseBodyBase64,

            ImmutableDictionary<string, string> responseHeaders,

            Outputs.GetHttpRetryResult? retry,

            int statusCode,

            string url)
        {
            Body = body;
            CaCertPem = caCertPem;
            ClientCertPem = clientCertPem;
            ClientKeyPem = clientKeyPem;
            Id = id;
            Insecure = insecure;
            Method = method;
            RequestBody = requestBody;
            RequestHeaders = requestHeaders;
            RequestTimeoutMs = requestTimeoutMs;
            ResponseBody = responseBody;
            ResponseBodyBase64 = responseBodyBase64;
            ResponseHeaders = responseHeaders;
            Retry = retry;
            StatusCode = statusCode;
            Url = url;
        }
    }
}
