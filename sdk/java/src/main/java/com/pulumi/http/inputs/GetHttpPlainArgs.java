// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.http.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.http.inputs.GetHttpRetry;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHttpPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHttpPlainArgs Empty = new GetHttpPlainArgs();

    /**
     * Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    @Import(name="caCertPem")
    private @Nullable String caCertPem;

    /**
     * @return Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    public Optional<String> caCertPem() {
        return Optional.ofNullable(this.caCertPem);
    }

    /**
     * Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
     * 
     */
    @Import(name="insecure")
    private @Nullable Boolean insecure;

    /**
     * @return Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
     * 
     */
    public Optional<Boolean> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
     * 
     */
    @Import(name="method")
    private @Nullable String method;

    /**
     * @return The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The request body as a string.
     * 
     */
    @Import(name="requestBody")
    private @Nullable String requestBody;

    /**
     * @return The request body as a string.
     * 
     */
    public Optional<String> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }

    /**
     * A map of request header field names and values.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Map<String,String> requestHeaders;

    /**
     * @return A map of request header field names and values.
     * 
     */
    public Optional<Map<String,String>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * The request timeout in milliseconds.
     * 
     */
    @Import(name="requestTimeoutMs")
    private @Nullable Integer requestTimeoutMs;

    /**
     * @return The request timeout in milliseconds.
     * 
     */
    public Optional<Integer> requestTimeoutMs() {
        return Optional.ofNullable(this.requestTimeoutMs);
    }

    /**
     * Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
     * 
     */
    @Import(name="retry")
    private @Nullable GetHttpRetry retry;

    /**
     * @return Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
     * 
     */
    public Optional<GetHttpRetry> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * The URL for the request. Supported schemes are `http.getHttp` and `https`.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    /**
     * @return The URL for the request. Supported schemes are `http.getHttp` and `https`.
     * 
     */
    public String url() {
        return this.url;
    }

    private GetHttpPlainArgs() {}

    private GetHttpPlainArgs(GetHttpPlainArgs $) {
        this.caCertPem = $.caCertPem;
        this.insecure = $.insecure;
        this.method = $.method;
        this.requestBody = $.requestBody;
        this.requestHeaders = $.requestHeaders;
        this.requestTimeoutMs = $.requestTimeoutMs;
        this.retry = $.retry;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHttpPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHttpPlainArgs $;

        public Builder() {
            $ = new GetHttpPlainArgs();
        }

        public Builder(GetHttpPlainArgs defaults) {
            $ = new GetHttpPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertPem Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
         * 
         * @return builder
         * 
         */
        public Builder caCertPem(@Nullable String caCertPem) {
            $.caCertPem = caCertPem;
            return this;
        }

        /**
         * @param insecure Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Boolean insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param method The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable String method) {
            $.method = method;
            return this;
        }

        /**
         * @param requestBody The request body as a string.
         * 
         * @return builder
         * 
         */
        public Builder requestBody(@Nullable String requestBody) {
            $.requestBody = requestBody;
            return this;
        }

        /**
         * @param requestHeaders A map of request header field names and values.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Map<String,String> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestTimeoutMs The request timeout in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeoutMs(@Nullable Integer requestTimeoutMs) {
            $.requestTimeoutMs = requestTimeoutMs;
            return this;
        }

        /**
         * @param retry Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable GetHttpRetry retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param url The URL for the request. Supported schemes are `http.getHttp` and `https`.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public GetHttpPlainArgs build() {
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
