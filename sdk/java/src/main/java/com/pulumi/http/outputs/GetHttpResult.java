// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.http.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.http.outputs.GetHttpRetry;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHttpResult {
    /**
     * @return The response body returned as a string. **NOTE**: This is deprecated, use `response_body` instead.
     * 
     * @deprecated
     * Use response_body instead
     * 
     */
    @Deprecated /* Use response_body instead */
    private String body;
    /**
     * @return Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    private @Nullable String caCertPem;
    /**
     * @return Client certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    private @Nullable String clientCertPem;
    /**
     * @return Client key in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    private @Nullable String clientKeyPem;
    /**
     * @return The URL used for the request.
     * 
     */
    private String id;
    /**
     * @return Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
     * 
     */
    private @Nullable Boolean insecure;
    /**
     * @return The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
     * 
     */
    private @Nullable String method;
    /**
     * @return The request body as a string.
     * 
     */
    private @Nullable String requestBody;
    /**
     * @return A map of request header field names and values.
     * 
     */
    private @Nullable Map<String,String> requestHeaders;
    /**
     * @return The request timeout in milliseconds.
     * 
     */
    private @Nullable Integer requestTimeoutMs;
    /**
     * @return The response body returned as a string.
     * 
     */
    private String responseBody;
    /**
     * @return The response body encoded as base64 (standard) as defined in [RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648#section-4).
     * 
     */
    private String responseBodyBase64;
    /**
     * @return A map of response header field names and values. Duplicate headers are concatenated according to [RFC2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2).
     * 
     */
    private Map<String,String> responseHeaders;
    private @Nullable GetHttpRetry retry;
    /**
     * @return The HTTP response status code.
     * 
     */
    private Integer statusCode;
    /**
     * @return The URL for the request. Supported schemes are `http.getHttp` and `https`.
     * 
     */
    private String url;

    private GetHttpResult() {}
    /**
     * @return The response body returned as a string. **NOTE**: This is deprecated, use `response_body` instead.
     * 
     * @deprecated
     * Use response_body instead
     * 
     */
    @Deprecated /* Use response_body instead */
    public String body() {
        return this.body;
    }
    /**
     * @return Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    public Optional<String> caCertPem() {
        return Optional.ofNullable(this.caCertPem);
    }
    /**
     * @return Client certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    public Optional<String> clientCertPem() {
        return Optional.ofNullable(this.clientCertPem);
    }
    /**
     * @return Client key in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    public Optional<String> clientKeyPem() {
        return Optional.ofNullable(this.clientKeyPem);
    }
    /**
     * @return The URL used for the request.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
     * 
     */
    public Optional<Boolean> insecure() {
        return Optional.ofNullable(this.insecure);
    }
    /**
     * @return The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return The request body as a string.
     * 
     */
    public Optional<String> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }
    /**
     * @return A map of request header field names and values.
     * 
     */
    public Map<String,String> requestHeaders() {
        return this.requestHeaders == null ? Map.of() : this.requestHeaders;
    }
    /**
     * @return The request timeout in milliseconds.
     * 
     */
    public Optional<Integer> requestTimeoutMs() {
        return Optional.ofNullable(this.requestTimeoutMs);
    }
    /**
     * @return The response body returned as a string.
     * 
     */
    public String responseBody() {
        return this.responseBody;
    }
    /**
     * @return The response body encoded as base64 (standard) as defined in [RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648#section-4).
     * 
     */
    public String responseBodyBase64() {
        return this.responseBodyBase64;
    }
    /**
     * @return A map of response header field names and values. Duplicate headers are concatenated according to [RFC2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2).
     * 
     */
    public Map<String,String> responseHeaders() {
        return this.responseHeaders;
    }
    public Optional<GetHttpRetry> retry() {
        return Optional.ofNullable(this.retry);
    }
    /**
     * @return The HTTP response status code.
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return The URL for the request. Supported schemes are `http.getHttp` and `https`.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHttpResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String body;
        private @Nullable String caCertPem;
        private @Nullable String clientCertPem;
        private @Nullable String clientKeyPem;
        private String id;
        private @Nullable Boolean insecure;
        private @Nullable String method;
        private @Nullable String requestBody;
        private @Nullable Map<String,String> requestHeaders;
        private @Nullable Integer requestTimeoutMs;
        private String responseBody;
        private String responseBodyBase64;
        private Map<String,String> responseHeaders;
        private @Nullable GetHttpRetry retry;
        private Integer statusCode;
        private String url;
        public Builder() {}
        public Builder(GetHttpResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.caCertPem = defaults.caCertPem;
    	      this.clientCertPem = defaults.clientCertPem;
    	      this.clientKeyPem = defaults.clientKeyPem;
    	      this.id = defaults.id;
    	      this.insecure = defaults.insecure;
    	      this.method = defaults.method;
    	      this.requestBody = defaults.requestBody;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestTimeoutMs = defaults.requestTimeoutMs;
    	      this.responseBody = defaults.responseBody;
    	      this.responseBodyBase64 = defaults.responseBodyBase64;
    	      this.responseHeaders = defaults.responseHeaders;
    	      this.retry = defaults.retry;
    	      this.statusCode = defaults.statusCode;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder body(String body) {
            if (body == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "body");
            }
            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder caCertPem(@Nullable String caCertPem) {

            this.caCertPem = caCertPem;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertPem(@Nullable String clientCertPem) {

            this.clientCertPem = clientCertPem;
            return this;
        }
        @CustomType.Setter
        public Builder clientKeyPem(@Nullable String clientKeyPem) {

            this.clientKeyPem = clientKeyPem;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder insecure(@Nullable Boolean insecure) {

            this.insecure = insecure;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder requestBody(@Nullable String requestBody) {

            this.requestBody = requestBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(@Nullable Map<String,String> requestHeaders) {

            this.requestHeaders = requestHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder requestTimeoutMs(@Nullable Integer requestTimeoutMs) {

            this.requestTimeoutMs = requestTimeoutMs;
            return this;
        }
        @CustomType.Setter
        public Builder responseBody(String responseBody) {
            if (responseBody == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "responseBody");
            }
            this.responseBody = responseBody;
            return this;
        }
        @CustomType.Setter
        public Builder responseBodyBase64(String responseBodyBase64) {
            if (responseBodyBase64 == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "responseBodyBase64");
            }
            this.responseBodyBase64 = responseBodyBase64;
            return this;
        }
        @CustomType.Setter
        public Builder responseHeaders(Map<String,String> responseHeaders) {
            if (responseHeaders == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "responseHeaders");
            }
            this.responseHeaders = responseHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder retry(@Nullable GetHttpRetry retry) {

            this.retry = retry;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(Integer statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetHttpResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetHttpResult build() {
            final var _resultValue = new GetHttpResult();
            _resultValue.body = body;
            _resultValue.caCertPem = caCertPem;
            _resultValue.clientCertPem = clientCertPem;
            _resultValue.clientKeyPem = clientKeyPem;
            _resultValue.id = id;
            _resultValue.insecure = insecure;
            _resultValue.method = method;
            _resultValue.requestBody = requestBody;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.requestTimeoutMs = requestTimeoutMs;
            _resultValue.responseBody = responseBody;
            _resultValue.responseBodyBase64 = responseBodyBase64;
            _resultValue.responseHeaders = responseHeaders;
            _resultValue.retry = retry;
            _resultValue.statusCode = statusCode;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
