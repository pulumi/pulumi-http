// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.http.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.http.inputs.GetHttpRetryArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHttpArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHttpArgs Empty = new GetHttpArgs();

    /**
     * Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    @Import(name="caCertPem")
    private @Nullable Output<String> caCertPem;

    /**
     * @return Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     * 
     */
    public Optional<Output<String>> caCertPem() {
        return Optional.ofNullable(this.caCertPem);
    }

    /**
     * Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
     * 
     */
    @Import(name="insecure")
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The request body as a string.
     * 
     */
    @Import(name="requestBody")
    private @Nullable Output<String> requestBody;

    /**
     * @return The request body as a string.
     * 
     */
    public Optional<Output<String>> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }

    /**
     * A map of request header field names and values.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<Map<String,String>> requestHeaders;

    /**
     * @return A map of request header field names and values.
     * 
     */
    public Optional<Output<Map<String,String>>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * The request timeout in milliseconds.
     * 
     */
    @Import(name="requestTimeoutMs")
    private @Nullable Output<Integer> requestTimeoutMs;

    /**
     * @return The request timeout in milliseconds.
     * 
     */
    public Optional<Output<Integer>> requestTimeoutMs() {
        return Optional.ofNullable(this.requestTimeoutMs);
    }

    /**
     * Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
     * 
     */
    @Import(name="retry")
    private @Nullable Output<GetHttpRetryArgs> retry;

    /**
     * @return Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
     * 
     */
    public Optional<Output<GetHttpRetryArgs>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * The URL for the request. Supported schemes are `http.getHttp` and `https`.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL for the request. Supported schemes are `http.getHttp` and `https`.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private GetHttpArgs() {}

    private GetHttpArgs(GetHttpArgs $) {
        this.caCertPem = $.caCertPem;
        this.insecure = $.insecure;
        this.method = $.method;
        this.requestBody = $.requestBody;
        this.requestHeaders = $.requestHeaders;
        this.requestTimeoutMs = $.requestTimeoutMs;
        this.retry = $.retry;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHttpArgs $;

        public Builder() {
            $ = new GetHttpArgs();
        }

        public Builder(GetHttpArgs defaults) {
            $ = new GetHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertPem Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
         * 
         * @return builder
         * 
         */
        public Builder caCertPem(@Nullable Output<String> caCertPem) {
            $.caCertPem = caCertPem;
            return this;
        }

        /**
         * @param caCertPem Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
         * 
         * @return builder
         * 
         */
        public Builder caCertPem(String caCertPem) {
            return caCertPem(Output.of(caCertPem));
        }

        /**
         * @param insecure Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Disables verification of the server&#39;s certificate chain and hostname. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param method The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param requestBody The request body as a string.
         * 
         * @return builder
         * 
         */
        public Builder requestBody(@Nullable Output<String> requestBody) {
            $.requestBody = requestBody;
            return this;
        }

        /**
         * @param requestBody The request body as a string.
         * 
         * @return builder
         * 
         */
        public Builder requestBody(String requestBody) {
            return requestBody(Output.of(requestBody));
        }

        /**
         * @param requestHeaders A map of request header field names and values.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<Map<String,String>> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders A map of request header field names and values.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(Map<String,String> requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestTimeoutMs The request timeout in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeoutMs(@Nullable Output<Integer> requestTimeoutMs) {
            $.requestTimeoutMs = requestTimeoutMs;
            return this;
        }

        /**
         * @param requestTimeoutMs The request timeout in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeoutMs(Integer requestTimeoutMs) {
            return requestTimeoutMs(Output.of(requestTimeoutMs));
        }

        /**
         * @param retry Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable Output<GetHttpRetryArgs> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).
         * 
         * @return builder
         * 
         */
        public Builder retry(GetHttpRetryArgs retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param url The URL for the request. Supported schemes are `http.getHttp` and `https`.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL for the request. Supported schemes are `http.getHttp` and `https`.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public GetHttpArgs build() {
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
